{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPIPeH4Bm2ZWhHXGpFiy+rS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sivanujands/StatisticalTests/blob/main/RelatedSamples/ParametricTests/Repeated_Measures_ANOVA.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5cISx-hwSXVJ",
        "outputId": "107fa5b3-de9d-4e02-a1b1-ffbc9ddac515"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original DataFrame:\n",
            "   Participant  Time1  Time2  Time3\n",
            "0            1     60     75     70\n",
            "1            2     65     80     78\n",
            "2            3     55     70     65\n",
            "3            4     70     85     82\n",
            "4            5     62     78     75\n",
            "5            6     68     82     80\n",
            "6            7     58     72     69\n",
            "7            8     75     88     85\n",
            "\n",
            "\n",
            "Long Format DataFrame:\n",
            "    Participant   Time  Score\n",
            "0             1  Time1     60\n",
            "1             2  Time1     65\n",
            "2             3  Time1     55\n",
            "3             4  Time1     70\n",
            "4             5  Time1     62\n",
            "5             6  Time1     68\n",
            "6             7  Time1     58\n",
            "7             8  Time1     75\n",
            "8             1  Time2     75\n",
            "9             2  Time2     80\n",
            "10            3  Time2     70\n",
            "11            4  Time2     85\n",
            "12            5  Time2     78\n",
            "13            6  Time2     82\n",
            "14            7  Time2     72\n",
            "15            8  Time2     88\n",
            "16            1  Time3     70\n",
            "17            2  Time3     78\n",
            "18            3  Time3     65\n",
            "19            4  Time3     82\n",
            "20            5  Time3     75\n",
            "21            6  Time3     80\n",
            "22            7  Time3     69\n",
            "23            8  Time3     85\n",
            "\n",
            "\n",
            "Repeated Measures ANOVA Results:\n",
            "               Anova\n",
            "===================================\n",
            "     F Value  Num DF  Den DF Pr > F\n",
            "-----------------------------------\n",
            "Time 727.1651 2.0000 14.0000 0.0000\n",
            "===================================\n",
            "\n",
            "\n",
            "\n",
            "P-value for the 'Time' effect: 0.000\n",
            "Significance Level (alpha): 0.05\n",
            "Since p-value (0.000) < alpha (0.05), we reject the null hypothesis.\n",
            "Conclusion: There is a statistically significant difference in memory scores across the three time points.\n",
            "Further post-hoc tests would be needed to determine which specific time points differ.\n",
            "\n",
            "--- Post-hoc Analysis (if overall ANOVA is significant) ---\n",
            "Bonferroni corrected alpha for 3 comparisons: 0.017\n",
            "Time1 vs Time2: t=-45.153, p=0.000\n",
            "  Significant difference (after Bonferroni correction)\n",
            "Time1 vs Time3: t=-24.702, p=0.000\n",
            "  Significant difference (after Bonferroni correction)\n",
            "Time2 vs Time3: t=7.891, p=0.000\n",
            "  Significant difference (after Bonferroni correction)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.anova import AnovaRM\n",
        "from scipy import stats # Import scipy.stats for t-tests\n",
        "\n",
        "# 1. Data\n",
        "data = {\n",
        "    'Participant': [1, 2, 3, 4, 5, 6, 7, 8],\n",
        "    'Time1': [60, 65, 55, 70, 62, 68, 58, 75],\n",
        "    'Time2': [75, 80, 70, 85, 78, 82, 72, 88],\n",
        "    'Time3': [70, 78, 65, 82, 75, 80, 69, 85]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "print(\"Original DataFrame:\")\n",
        "print(df)\n",
        "print(\"\\n\")\n",
        "\n",
        "# 2. Reshape the data from wide to long format\n",
        "# Repeated Measures ANOVA in statsmodels expects data in a 'long' format.\n",
        "df_long = pd.melt(df, id_vars=['Participant'], var_name='Time', value_name='Score')\n",
        "\n",
        "# Map 'Time' categories to numerical or ordered categories if needed, or just use as strings\n",
        "# For simplicity, we'll use them as strings 'Time1', 'Time2', 'Time3'\n",
        "# If you wanted to treat them as actual numerical time points:\n",
        "# df_long['Time_Num'] = df_long['Time'].map({'Time1': 1, 'Time2': 2, 'Time3': 3})\n",
        "\n",
        "print(\"Long Format DataFrame:\")\n",
        "print(df_long)\n",
        "print(\"\\n\")\n",
        "\n",
        "# 3. Perform Repeated Measures ANOVA\n",
        "# participant: The column identifying the subject/participant\n",
        "# within: The column representing the repeated measure (the factor with multiple levels)\n",
        "# AnovaRM expects the dependent variable to be specified in the formula string as well.\n",
        "aovrm = AnovaRM(data=df_long, depvar='Score', subject='Participant', within=['Time'])\n",
        "anova_results = aovrm.fit() # Renamed to avoid confusion\n",
        "\n",
        "print(\"Repeated Measures ANOVA Results:\")\n",
        "print(anova_results.summary())\n",
        "print(\"\\n\")\n",
        "\n",
        "# 4. Extract the p-value for the 'Time' effect\n",
        "# The 'Time' row in the output table is what we're interested in for the overall effect.\n",
        "# Look for 'Pr > F' for the 'Time' factor.\n",
        "# The `anova_results.anova_table` object is a Pandas DataFrame, so we can access its elements.\n",
        "p_value_time_effect = anova_results.anova_table.loc['Time', 'Pr > F'] # Access the p-value for 'Time'\n",
        "\n",
        "print(f\"P-value for the 'Time' effect: {p_value_time_effect:.3f}\")\n",
        "\n",
        "# 5. Set the Significance Level\n",
        "alpha = 0.05\n",
        "\n",
        "# 6. Make a Decision and Draw a Conclusion\n",
        "print(f\"Significance Level (alpha): {alpha}\")\n",
        "\n",
        "if p_value_time_effect < alpha:\n",
        "    print(f\"Since p-value ({p_value_time_effect:.3f}) < alpha ({alpha}), we reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is a statistically significant difference in memory scores across the three time points.\")\n",
        "    print(\"Further post-hoc tests would be needed to determine which specific time points differ.\")\n",
        "else:\n",
        "    print(f\"Since p-value ({p_value_time_effect:.3f}) >= alpha ({alpha}), we fail to reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is no statistically significant difference in memory scores across the three time points.\")\n",
        "\n",
        "# Example of a simple post-hoc test (pairwise t-tests with Bonferroni correction)\n",
        "# Note: Statsmodels AnovaRM does not directly provide post-hoc tests in the same way.\n",
        "# You would typically do this manually or use a different library/approach.\n",
        "# Here's a conceptual example using pairwise t-tests.\n",
        "from statsmodels.stats.multicomp import pairwise_tukeyhsd\n",
        "\n",
        "# If overall ANOVA is significant, perform post-hoc tests\n",
        "if p_value_time_effect < alpha:\n",
        "    print(\"\\n--- Post-hoc Analysis (if overall ANOVA is significant) ---\")\n",
        "    # For repeated measures, using pairwise t-tests with Bonferroni correction is common\n",
        "    # You would need to filter data for each pair and run ttest_rel\n",
        "    # A more robust approach would be to use `statsmodels.stats.multicomp.MultiComparison`\n",
        "    # or a dedicated post-hoc function if your library supports it for RM ANOVA.\n",
        "    # For illustration, let's just do manual paired t-tests with Bonferroni adjustment\n",
        "\n",
        "    # Number of comparisons for Bonferroni\n",
        "    # (Time1-Time2, Time1-Time3, Time2-Time3) = 3 comparisons\n",
        "    num_comparisons = 3\n",
        "    bonferroni_alpha = alpha / num_comparisons\n",
        "    print(f\"Bonferroni corrected alpha for {num_comparisons} comparisons: {bonferroni_alpha:.3f}\")\n",
        "\n",
        "    # Time1 vs Time2\n",
        "    t, p = stats.ttest_rel(df['Time1'], df['Time2'])\n",
        "    print(f\"Time1 vs Time2: t={t:.3f}, p={p:.3f}\")\n",
        "    if p < bonferroni_alpha:\n",
        "        print(\"  Significant difference (after Bonferroni correction)\")\n",
        "    else:\n",
        "        print(\"  No significant difference (after Bonferroni correction)\")\n",
        "\n",
        "    # Time1 vs Time3\n",
        "    t, p = stats.ttest_rel(df['Time1'], df['Time3'])\n",
        "    print(f\"Time1 vs Time3: t={t:.3f}, p={p:.3f}\")\n",
        "    if p < bonferroni_alpha:\n",
        "        print(\"  Significant difference (after Bonferroni correction)\")\n",
        "    else:\n",
        "        print(\"  No significant difference (after Bonferroni correction)\")\n",
        "\n",
        "    # Time2 vs Time3\n",
        "    t, p = stats.ttest_rel(df['Time2'], df['Time3'])\n",
        "    print(f\"Time2 vs Time3: t={t:.3f}, p={p:.3f}\")\n",
        "    if p < bonferroni_alpha:\n",
        "        print(\"  Significant difference (after Bonferroni correction)\")\n",
        "    else:\n",
        "        print(\"  No significant difference (after Bonferroni correction)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation of the Output:**\n",
        "\n",
        "* The anova_table.summary() output will provide a detailed table. The key row to look at for the main effect of time is typically labeled 'Time' (or whatever you named your within variable).\n",
        "\n",
        "* F-value: This is the calculated F-statistic. A larger value suggests a stronger effect of the time points.\n",
        "\n",
        "* Pr > F (P-value): This is the p-value associated with the F-statistic for the 'Time' effect.\n",
        "\n",
        "* If this p-value is less than your chosen alpha (e.g., 0.05), you reject the null hypothesis and conclude that there is a statistically significant overall change in memory scores across the three time points. If the overall ANOVA is significant, you would then proceed with post-hoc tests (like the Bonferroni-corrected paired t-tests shown conceptually in the example) to pinpoint which specific time points differ from each other.\n",
        "\n",
        "* The output will also include information related to sphericity (Mauchly's Test) and corrected p-values (e.g., Greenhouse-Geisser, Huynh-Feldt) if sphericity is violated. It's good practice to check these in a real analysis."
      ],
      "metadata": {
        "id": "B_L66v3xWStY"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IeVn31xtWit3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}